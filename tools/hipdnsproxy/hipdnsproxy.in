#! /usr/bin/env python

"""HIP DNS Proxy launcher."""

import logging
import optparse
import sys

sys.path.insert(0, '@pythondir@/hipdnsproxy')

import dnsproxy
import util

HIPHOSTS = '@sysconfdir@/hosts'
PIDFILE = '/var/run/hipdnsproxy.pid'


def main():
    """The main function."""
    optparser = optparse.OptionParser()
    optparser.add_option('-b', '--background', dest='background',
                         action='store_true', default=False,
                         help='Fork into background')
    optparser.add_option('-H', '--hosts', dest='hosts', action='append',
                         help='hosts file')
    optparser.add_option('-i', '--ip', dest='bind_ip', action='store',
                         default=None, help='Bind IP address')
    optparser.add_option('-k', '--kill', dest='kill', action='store_true',
                         default=False, help='Kill old instance')
    optparser.add_option('-l', '--port', dest='bind_port', action='store',
                         type='int', default=None, help='Bind port')
    optparser.add_option('-L', '--disable-lsi', dest='disable_lsi',
                         default=False, action='store_true',
                         help='Disable LSI')
    optparser.add_option('-P', '--pidfile', dest='pidfile', action='store',
                         default=PIDFILE, help='PID file location')
    optparser.add_option('-s', '--server', dest='server_ip', action='store',
                         default=None, help='DNS server IP address')
    optparser.add_option('-p', '--serverport', dest='server_port',
                         action='store', type='int', default=None,
                         help='DNS server port')
    optparser.add_option('-S', '--syslog', dest='syslog', action='store_true',
                         default=False, help='Log to syslog')
    optparser.add_option('-t', '--dns-timeout', dest='dns_timeout',
                         action='store', type='float', default=2.0,
                         help='DNS timeout')
    optparser.add_option('-d', '--debug', dest='loglevel',
                         action='store_const', const=logging.DEBUG,
                         help='Debug logging')
    optparser.add_option('-v', '--verbose', dest='loglevel',
                         action='store_const', const=logging.INFO,
                         help='Verbose logging')
    optparser.add_option('-q', '--quiet', dest='loglevel',
                         action='store_const', const=logging.ERROR,
                         help='Less logging', default=logging.WARNING)
    optparser.add_option('--hip-hosts', dest='hiphosts', action='store',
                         default=HIPHOSTS, help='HIP hosts file')
    optparser.add_option('--hip-domain-prefix', dest='prefix', default=None,
                         action='store', help='HIP domain prefix')

    (options, args) = optparser.parse_args()

    logging.getLogger().setLevel(options.loglevel)

    child = False
    if (options.background):
        child = util.daemonize()
    else:
        if options.syslog:
            util.log2syslog()
        else:
            loghandler = logging.StreamHandler(sys.stderr)
            loghandler.setFormatter(logging.Formatter(
                '%(asctime)s %(levelname)-8s %(message)s'))
            logging.getLogger().addHandler(loghandler)

    dnsp = dnsproxy.DNSProxy(bind_ip=options.bind_ip,
                             bind_port=options.bind_port,
                             disable_lsi=options.disable_lsi,
                             dns_timeout=options.dns_timeout,
                             fork=options.background,
                             hiphosts=options.hiphosts,
                             hostsnames=options.hosts,
                             pidfile=options.pidfile,
                             prefix=options.prefix,
                             server_ip=options.server_ip,
                             server_port=options.server_port)

    if child or not options.background:
        if options.kill:
            dnsp.killold()
        dnsp.savepid()
        dnsp.mainloop(args)


if __name__ == '__main__':
    main()
